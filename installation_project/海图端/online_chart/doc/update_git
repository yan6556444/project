#!/bin/sh -e
#
umask 002

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
        echo "Don't run this script from the command line." >&2
        echo " (if you want, you could supply GIT_DIR then run" >&2
        echo "  $0 <ref> <oldrev> <newrev>)" >&2
        exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
        echo "usage: $0 <ref> <oldrev> <newrev>" >&2
        exit 1
fi

HEAD=$(git symbolic-ref HEAD)
if [ "$refname" = "$HEAD" ] ; then
        echo "The '$refname' branch is currently checked out." >&2
        exit 1
fi

if [ "$refname" = "refs/heads/master" ] ; then
        echo "You cannot push to the 'master' branch here. Use 'web'." >&2
        exit 1
fi

if [ "$refname" != "refs/heads/web" ] ; then
        #echo "You can only push to the 'web' branch here, not '$refname'!" >&2
        exit 0
fi

if [ $HEAD != "refs/heads/master" ] ; then
        echo "The 'web' branch is not currently checked out." >&2
        exit 1
fi

zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
        echo "You cannot delete the web branch!" >&2
        exit 1
fi

# absolute path
cd "$GIT_DIR"
GIT_DIR="$(pwd)"
cd ../../$(basename "$GIT_DIR" .git)

if [ $( git-ls-files -mo | wc -l ) -gt 0 ] ; then
        echo "There are modified or untracked files:" >&2
        git-ls-files -mo >&2
        exit 1
fi

if ! git merge --ff-only $newrev ; then
        echo "Merge failed. (Not fast-forward?) Aborting." >&2
        exit 1
fi

exit 0
